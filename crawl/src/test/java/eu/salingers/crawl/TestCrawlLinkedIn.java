package eu.salingers.crawl;
import static org.junit.Assert.assertNotNull;

import java.io.File;
import java.io.IOException;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.Iterator;
import java.util.logging.Level;

import javax.xml.parsers.ParserConfigurationException;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;
import org.junit.Test;
import org.xml.sax.SAXException;

import com.gargoylesoftware.htmlunit.BrowserVersion;
import com.gargoylesoftware.htmlunit.CookieManager;
import com.gargoylesoftware.htmlunit.NicelyResynchronizingAjaxController;
import com.gargoylesoftware.htmlunit.WebClient;
import com.gargoylesoftware.htmlunit.html.DomElement;
import com.gargoylesoftware.htmlunit.html.HTMLParserListener;
import com.gargoylesoftware.htmlunit.html.HtmlForm;
import com.gargoylesoftware.htmlunit.html.HtmlPage;
import com.gargoylesoftware.htmlunit.html.HtmlUnorderedList;

/*
 * This Java source file was auto generated by running 'gradle init --type java-library'
 * by 'orestis' at '13.11.16 15:50' with Gradle 2.13
 *
 * @author orestis, @date 13.11.16 15:50
 */
public class TestCrawlLinkedIn {
  @Test 
  public void crawl() {
    String searchQuery = "";
    HtmlPage pageBeforeLogin = null;
    HtmlPage pageAfterLogin = null;
    WebClient webClient = null;
    try {  
      String searchUrl = "https://ch.linkedin.com/" + URLEncoder.encode(searchQuery, "UTF-8");
      HtmlUnorderedList viewersList = null;
      int i = 0;
      do {
        webClient = getWebClient();
        pageBeforeLogin = webClient.getPage(searchUrl);
        prepareLogin(pageBeforeLogin, "orestis@salingers.eu", "mB9-yJf-kww-ruG");
        getLoginForm(pageBeforeLogin);
        webClient.addRequestHeader("Authorization", "Basic");
        pageAfterLogin = login(pageBeforeLogin);
        pageAfterLogin = webClient.getPage("https://www.linkedin.com/wvmx/profile?trk=hp-identity-wvmp");
        System.out.println("Called visitors page\n");
        viewersList = (HtmlUnorderedList) pageAfterLogin.getElementById("viewers-list");
        System.out.println((viewersList == null) ?"Failed to log-in on #" + ++i : "Log-in " + " on #" + ++i + "\n\n");
        webClient.close();
        webClient = null;
      }while(viewersList == null && i < 10);
      assertNotNull(viewersList);
      extractVistorData(viewersList.getChildElements().iterator());       
    }catch(Exception e){
      e.printStackTrace();
    }finally{
      if(webClient != null) 
        webClient.close();
    }
  }
  
//  Visitor types:
//  1. PUBLIC - Premium
/*  
  <li class="PUBLIC">
  <a class="profile-pic" title="View Toby Harper's profile" href="https://www.linkedin.com/profile/view?id=AAYAABEWg5YBIH5_W1sB5Mw12LTd4XtbOCj_rAg&amp;authType=name&amp;authToken=QaWV&amp;trk=mirror-profile-memberlist-photo">
    <img alt="Toby Harper" width="200" height="200" src="https://media.licdn.com/mpr/mpr/shrink_200_200/p/3/005/010/230/2abf030.jpg"/>
  </a>
  <div class="viewer-info">
    <h3>
      <a href="https://www.linkedin.com/profile/view?id=AAYAABEWg5YBIH5_W1sB5Mw12LTd4XtbOCj_rAg&amp;authType=name&amp;authToken=QaWV&amp;trk=mirror-profile-memberlist-name" title="View Toby Harper's profile">
        Toby Harper
      </a>
      <abbr aria-hidden="true" title="Toby Harper is your connection" class="degree-icon ">
        1
        <sup>
          st
        </sup>
      </abbr>
      <a title="Toby Harper has a Premium Account" href="/mnyfe/subscriptionv2?displayProducts=&amp;trk=premium_badge_upsell" class="premiumicon subscriber">
        Premium Badge
      </a>
    </h3>
    <h4 class="headline">
      Recruitment Consultant at TWRG Holdings Ltd
    </h4>
    <dl class="demographic">
      <dt>
        Location
      </dt>
      <dd class="location">
        United Kingdom
      </dd>
      <dt>
        Industry
      </dt>
      <dd class="industry">
        Staffing and Recruiting
      </dd>
    </dl>
    <dl class="visit-details">
      <dt>
        Date
      </dt>
      <dd class="date">
        2d ago
      </dd>
    </dl>
    <dl class="social" aria-haspopup="true">
      <dt>
        Shared connections
      </dt>
      <dd class="connections">
        <a href="/vsearch/p?pivotType=cofc&amp;pid=286688150&amp;goback=%2Ewvp_*1_*1_*1&amp;trk=mirror-profile-memberlist-incommon" class="shared-data" data-li-tooltip-id="connections" data-insert-id="286688150" data-insert-url="/wvmx/profile/in_common_v2?id=286688150" aria-haspopup="true" aria-expanded="false" aria-controls="callout-overlay">
          <span class="glyph" aria-hidden="true">
          </span>
          <strong>
            1
          </strong>
          <span>
            connection in common
          </span>
        </a>
      </dd>
    </dl>
  </div>
  <button data-href="/inbox/compose/dialog?insider=true&amp;connId=286688150&amp;trk=mirror-profile-memberlist-message" class="send-message primary-action" title="Send a message to Toby Harper">
    <span class="text">
      Message
    </span>
    <span class="success">
      Message sent
    </span>
  </button>
</li>
*/

//  2. PUBLIC - Basic
/*
    <li class="PUBLIC">
      <a class="profile-pic" title="View Kevin Kohler dos Santos's profile" href="https://www.linkedin.com/profile/view?id=AAYAAAmfgBABPyagWLpojBfJg0c0Xuyx75PW9GY&amp;authType=name&amp;authToken=G4Y6&amp;trk=mirror-profile-memberlist-photo">
        <img alt="Kevin Kohler dos Santos" width="200" height="200" src="https://media.licdn.com/mpr/mpr/shrink_200_200/p/1/005/099/3d9/06ba5a1.jpg"/>
      </a>
      <div class="viewer-info">
        <h3>
          <a href="https://www.linkedin.com/profile/view?id=AAYAAAmfgBABPyagWLpojBfJg0c0Xuyx75PW9GY&amp;authType=name&amp;authToken=G4Y6&amp;trk=mirror-profile-memberlist-name" title="View Kevin Kohler dos Santos's profile">
            Kevin Kohler dos Santos
          </a>
          <abbr aria-hidden="true" title="Kevin Kohler dos Santos is a 2nd degree contact" class="degree-icon ">
            2
            <sup>
              nd
            </sup>
          </abbr>
          <a title="Kevin Kohler dos Santos has a Premium Account" href="/mnyfe/subscriptionv2?displayProducts=&amp;trk=premium_badge_upsell" class="premiumicon subscriber">
            Premium Badge
          </a>
        </h3>
        <h4 class="headline">
          Making employees healthier by bringing them the whole variety of sports with one membership.
        </h4>
        <dl class="demographic">
          <dt>
            Location
          </dt>
          <dd class="location">
            Austria
          </dd>
          <dt>
            Industry
          </dt>
          <dd class="industry">
            Information Technology and Services
          </dd>
        </dl>
        <dl class="visit-details">
          <dt>
            Date
          </dt>
          <dd class="date">
            1w ago
          </dd>
        </dl>
        <dl class="social" aria-haspopup="true">
          <dt>
            Shared connections
          </dt>
          <dd class="connections">
            <a href="/vsearch/p?pivotType=cofc&amp;pid=161447952&amp;goback=%2Ewvp_*1_*1_*1&amp;trk=mirror-profile-memberlist-incommon" class="shared-data" data-li-tooltip-id="connections" data-insert-id="161447952" data-insert-title="See all 4 connections &amp;raquo;" data-insert-url="/wvmx/profile/in_common_v2?id=161447952" aria-haspopup="true" aria-expanded="false" aria-controls="callout-overlay">
              <span class="glyph" aria-hidden="true">
              </span>
              <strong>
                4
              </strong>
              <span>
                connections in common
              </span>
            </a>
          </dd>
        </dl>
      </div>
      <button data-href="/people/invite?from=profile&amp;key=161447952&amp;firstName=Kevin&amp;lastName=Kohler+dos+Santos&amp;authToken=G4Y6&amp;authType=name&amp;connectionParam=member_desktop_wvmx_landing-page&amp;csrfToken=ajax%3A2368611521029535143&amp;goback=%2Ewvp_*1_*1_*1&amp;trk=mirror-profile-memberlist-connect" class="send-invite primary-action">
        <span class="text">
          Connect
        </span>
        <span class="success">
          Invite sent
        </span>
      </button>
    </li>
*/
  
//  3. OBFUSCATED (Must be Premium?)
 /*
  <li class="OBFUSCATED">
  <div aria-role="img" class="profile-pic" title="Project Manager at Zühlke Group">
    <div class="glyph" aria-hidden="true">
    </div>
    <span class="alt">
      Project Manager at Zühlke Group
    </span>
  </div>
  <div class="viewer-info">
    <h3>
      <a href="/vsearch/p?orig=WVMX&amp;keywords=Project+Manager&amp;f_CC=23900&amp;trk=mirror-profile-memberlist-search" title="Search for Project Manager at Zühlke Group">
        Project Manager at Zühlke Group
      </a>
    </h3>
    <dl class="visit-details">
      <dt>
        Date
      </dt>
      <dd class="date">
        2d ago
      </dd>
    </dl>
    <a title="View the Zühlke Group page on LinkedIn" href="/company/23900?trk=company-logo">
      <img class="company-logo" alt="Project Manager at Zühlke Group" width="50" height="50" src="https://media.licdn.com/mpr/mpr/shrink_100_100/AAEAAQAAAAAAAAkkAAAAJGFmYmIwYWZjLTI4YTgtNDkwYy04NzU0LTA1N2NjMTdkODY3Yg.png"/>
    </a>
  </div>
  <button data-href="/vsearch/p?orig=WVMX&amp;keywords=Project+Manager&amp;f_CC=23900&amp;trk=mirror-profile-memberlist-search" class="search primary-action">
    <span class="text">
      Search
    </span>
  </button>
</li>
*/

//  4. UNKNOWN
/*  
    <li class="UNKNOWN">
    <div class="profile-pic">
      <div class="glyph unknown multiple" aria-hidden="true">
      </div>
    </div>
    <div class="viewer-info">
      <h3>
        2 LinkedIn members
      </h3>
      <p class="headline">
        These people viewed your profile in private mode
      </p>
      <p class="date-range">
        <time datetime="2016-10-30">
          Oct 30
        </time>
         – 
        <time datetime="2016-11-05">
          Nov 5
        </time>
      </p>
    </div>
    <button data-href="#private-mode-explanation" class="learn-more primary-action">
      <span class="text">
        Learn More
      </span>
    </button>
  </li>
*/  

//  In best case I can just pass the values of the data fields. The Visitor is able to decide what type of visit it is.
//  The Member is able to decide whether it is a Premium Member.
//  In any case: That knowledge must be as close as possible to Member and Visitor.  
  
  private void extractVistorData(final Iterator<DomElement> iterator) throws ParserConfigurationException, SAXException, IOException {
    while(iterator.hasNext()) {
      final DomElement htmlListItem = iterator.next();
      Document doc = Jsoup.parse(htmlListItem.asXml());
      System.out.println("className: " + doc.select("li").first().className());
      boolean isVisitorPublic = doc.select("li").first().className().equals("PUBLIC"); 
      final String name = doc.select("div[class=viewer-info]>h3>a").text();
      final String position = doc.select("div[class=viewer-info]>h4").text();
      String country = "";
      String industry = "";
      int connectionsInCommon = 0;
      String lastVisit = "";
      //need to get dd-elements by class name -> Premium members are different.
      if(isVisitorPublic){
        country = doc.select("div[class=viewer-info]>dl>dd[class=\"location\"]").text();
        industry = doc.select("div[class=viewer-info]>dl>dd[class=\"industry\"]").text();
        lastVisit = doc.select("div[class=viewer-info]>dl>dd[class=\"date\"]").text();
        connectionsInCommon = Integer.parseInt(doc.select("div[class=viewer-info]>dl>dd[class=\"date\"]").text().replace(" connections in common",""));
      }

      Member member = new Member.Builder()
          .name(name)
          .title(position)
          .country(country)
          .industry(industry)
          .connectionsInCommon(connectionsInCommon)
          .build();
      Visitor visitor = new Visitor.Builder().member(member).visits(Arrays.asList(new String[]{lastVisit})).build();
      System.out.println("Visitor name: " + visitor.member.name);
      System.out.println("Visitor title: " + visitor.member.title);
      System.out.println("Visitor country: " + visitor.member.country);
      System.out.println("Visitor industry: " + visitor.member.industry);
      System.out.println("Visitor connectionsInCommon: " + visitor.member.connectionsInCommon);
      System.out.println("\n");
    }
  }

  private WebClient getWebClient() {
    System.setProperty("org.apache.commons.logging.Log", "org.apache.commons.logging.impl.NoOpLog");
    java.util.logging.Logger.getLogger("com.gargoylesoftware").setLevel(Level.OFF); 
    BrowserVersion browser = BrowserVersion.BEST_SUPPORTED;
    WebClient webClient = new WebClient(browser);
    CookieManager cookieMan = new CookieManager();
    cookieMan = webClient.getCookieManager();
    cookieMan.setCookiesEnabled(true);
    webClient.getOptions().setUseInsecureSSL(true);
    // try to avoid Javascript errors & Exceptions
    final NicelyResynchronizingAjaxController ajaxController = new NicelyResynchronizingAjaxController();
    webClient.setAjaxController(ajaxController);
    webClient.getOptions().setRedirectEnabled(true);
    webClient.getOptions().setPrintContentOnFailingStatusCode(true);
    webClient.getOptions().setThrowExceptionOnScriptError(false);
    webClient.getOptions().setThrowExceptionOnFailingStatusCode(false);
    webClient.setHTMLParserListener(HTMLParserListener.LOG_REPORTER);
    webClient.getOptions().setActiveXNative(true);
    webClient.setJavaScriptTimeout(10_000L);
    webClient.getOptions().setTimeout(10_000);
    webClient.getOptions().setJavaScriptEnabled(true);
    //    webClient.waitForBackgroundJavaScript(2000);
    //    webClient.getOptions().setCssEnabled(false);
    return webClient;
  }

  private HtmlPage login(HtmlPage page) throws IOException {
    System.out.println("\nLOGGING-IN...\n");
    return (HtmlPage) page.getElementById("login-submit").click();
  }

  private void prepareLogin(HtmlPage page, String username, String password) {
    HtmlForm form = getLoginForm(page); 
    form.getInputByName("session_key").setValueAttribute(username);
    form.getInputByName("session_password").setValueAttribute(password);
    System.out.println("name: " + form.getInputByName("session_key").asXml());
    System.out.println("passwd: " + form.getInputByName("session_password").asXml());
  }

  private HtmlForm getLoginForm(HtmlPage page) {
    return page.getForms().stream()
        .filter(x -> "https://www.linkedin.com/uas/login-submit".equals(x.getActionAttribute())).findAny().orElse(null);
  }

  @SuppressWarnings("unused")
  private void waitForMillis(long millis) {
    try {
      Thread.sleep(millis);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

}
